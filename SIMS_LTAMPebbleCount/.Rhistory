#   )
# )
# Note, we will need to create a template for the categorical variables after
# the categorical attributes have been classified. The code below needs to know
# which columns to get unique categorical values from.
# Join EAL templates with source metadata and reformat ------------------------
# Apply mapping to source metadata
for (row in 1:nrow(mapping)) {
mapping$source_value[row]
source_value <- mapping$source_value[row]
target_value <- mapping$target_value[row]
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]][index] <- target_value
}
rm(list = ls())
setwd("/Users/csmith/Code/cos-spu-hydrology/SIMS_LTAMPebbleCount")
library(remotes)
library(tidyverse)
library(dplyr)
library(EMLassemblyline) # Install from GitHub: install_github("EDIorg/EMLassemblyline")
path_templates <- "./metadata_templates"
path_eml <- "./eml"
path_data <- "./data" # FIXME: path_data_root
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
codes <- attributes <- read_csv(paste0(path_data, "/processed/codes.csv"))
mapping <- read_csv(paste0(path_data, "/raw/LTAMPebbleCountMetadata - mapping.csv"))
for (row in 1:nrow(mapping)) {
mapping$source_value[row]
source_value <- mapping$source_value[row]
target_value <- mapping$target_value[row]
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]][index] <- target_value
}
mapping
attributes
View(attributes)
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
codes <- attributes <- read_csv(paste0(path_data, "/processed/codes.csv"))
mapping <- read_csv(paste0(path_data, "/raw/LTAMPebbleCountMetadata - mapping.csv"))
for (row in 1:nrow(mapping)) {
mapping$source_value[row]
source_value <- mapping$source_value[row]
target_value <- mapping$target_value[row]
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]][index] <- target_value
}
View(codes)
View(mapping)
rm(list = ls())
setwd("/Users/csmith/Code/cos-spu-hydrology/SIMS_LTAMPebbleCount")
library(remotes)
library(tidyverse)
library(dplyr)
library(EMLassemblyline) # Install from GitHub: install_github("EDIorg/EMLassemblyline")
path_templates <- "./metadata_templates"
path_eml <- "./eml"
path_data <- "./data" # FIXME: path_data_root
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
View(attributes)
codes <- attributes <- read_csv(paste0(path_data, "/processed/codes.csv"))
codes
View(attributes)
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
codes <- attributes <- read_csv(paste0(path_data, "/processed/codes.csv"))
mapping <- read_csv(paste0(path_data, "/raw/LTAMPebbleCountMetadata - mapping.csv"))
View(mapping)
mapping$source_value
for (row in 1:nrow(mapping)) {
mapping$source_value[row]
source_value <- mapping$source_value[row]
target_value <- mapping$target_value[row]
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]][index] <- target_value
}
path_templates <- "./metadata_templates"
path_eml <- "./eml"
path_data <- "./data" # FIXME: path_data_root
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
codes <- attributes <- read_csv(paste0(path_data, "/processed/codes.csv"))
mapping <- read_csv(paste0(path_data, "/raw/LTAMPebbleCountMetadata - mapping.csv"))
row <- 1
mapping$source_value[row]
mapping$source_value[row]
source_value <- mapping$source_value[row]
source_value
target_value <- mapping$target_value[row]
target_value
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]]
attributes
column
attributes[[column]]
colnames(attributes)
View(attributes)
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
codes <- read_csv(paste0(path_data, "/processed/codes.csv"))
mapping <- read_csv(paste0(path_data, "/raw/LTAMPebbleCountMetadata - mapping.csv"))
for (row in 1:nrow(mapping)) {
source_value <- mapping$source_value[row]
target_value <- mapping$target_value[row]
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]][index] <- target_value
}
summary_eal <- read_tsv(paste0(path_templates, "/attributes_SIMS_LTAMPebbleCount_Summary.txt")) %>%
select(attributeName)
working_eal <- read_tsv(file = paste0(path_templates, "/attributes_SIMS_LTAMPebbleCount_Working.txt")) %>%
select(attributeName)
# This script creates EML metadata for the LTAMPebbleCount dataset. It generates
# a set of metadata templates, fills them in with source metadata from the
# LTAMPebbleCount database, and then creates EML metadata from the templates.
# The metadata generation tool being used here is EMLassemblyline (EAL)
# (https://ediorg.github.io/EMLassemblyline/index.html).
# Initialize work space --------------------------------------------------------
rm(list = ls())
setwd("/Users/csmith/Code/cos-spu-hydrology/SIMS_LTAMPebbleCount")
library(remotes)
library(tidyverse)
library(dplyr)
library(EMLassemblyline) # Install from GitHub: install_github("EDIorg/EMLassemblyline")
path_templates <- "./metadata_templates"
path_eml <- "./eml"
path_data <- "./data" # FIXME: path_data_root
attributes <- read_csv(paste0(path_data, "/processed/attributes.csv"))
codes <- read_csv(paste0(path_data, "/processed/codes.csv"))
mapping <- read_csv(paste0(path_data, "/raw/LTAMPebbleCountMetadata - mapping.csv"))
# Create metadata templates ---------------------------------------------------
# Use EAL to create metadata templates. Once used, function calls  will be
# commented out to prevent them from running again, but keeping them around in
# case they need to be regenerated.
# template_core_metadata(
#   path = path_templates,
#   license = "CC0"
# )
# template_table_attributes(
#   path = path_templates,
#   data.path = paste0(path_data, "/processed"),
#   data.table = c(
#     "SIMS_LTAMPebbleCount_Summary.csv",
#     "SIMS_LTAMPebbleCount_Working.csv"
#   )
# )
# Note, we will need to create a template for the categorical variables after
# the categorical attributes have been classified. The code below needs to know
# which columns to get unique categorical values from.
# Join EAL templates with source metadata and reformat ------------------------
# Apply mapping to source metadata
for (row in 1:nrow(mapping)) {
source_value <- mapping$source_value[row]
target_value <- mapping$target_value[row]
column <- mapping$column[row]
index <- which(attributes[[column]] == source_value)
attributes[[column]][index] <- target_value
}
# Read the EAL attribute templates and prepare for join
summary_eal <- read_tsv(paste0(path_templates, "/attributes_SIMS_LTAMPebbleCount_Summary.txt")) %>%
select(attributeName)
working_eal <- read_tsv(file = paste0(path_templates, "/attributes_SIMS_LTAMPebbleCount_Working.txt")) %>%
select(attributeName)
attributes <- rename(attributes, "attributeName" = `ATTRIBUTE CODE`)
summary <- attributes %>% filter(`UPLOAD FILE NAME` == "SIMS_PebbleCount_Summary.csv")
working <- attributes %>% filter(`UPLOAD FILE NAME` == "SIMS_PebbleCount_Working.csv")
# Join
summary <- left_join(summary_eal, summary, by = "attributeName")
working <- left_join(working_eal, working, by = "attributeName")
# Rename existing columns to match the EAL templates.
summary <- summary %>%
rename(
"class" = "ATTRIBUTE DATA TYPE",
"dateTimeFormatString" = `ATTRIBUTE DATA TYPE UNIT`,
"attributeDefinition" = "ATTRIBUTE DESCRIPTION",
"unit" = "ATTRIBUTE DATA TYPE UNIT DESCRIPTION"
)
working <- working %>%
rename(
"class" = "ATTRIBUTE DATA TYPE",
"dateTimeFormatString" = `ATTRIBUTE DATA TYPE UNIT`,
"attributeDefinition" = "ATTRIBUTE DESCRIPTION",
"unit" = "ATTRIBUTE DATA TYPE UNIT DESCRIPTION"
)
# Do a little clean up on the values.
# FIXME: Move this operation to the mapping file
# Clean up: Convert "MM" to NA in the dateTimeFormatString column
summary$dateTimeFormatString <- ifelse(summary$dateTimeFormatString == "MM", NA, summary$dateTimeFormatString)
working$dateTimeFormatString <- ifelse(working$dateTimeFormatString == "MM", NA, working$dateTimeFormatString)
# Clean up: Convert format string to accepted value
working$dateTimeFormatString <- ifelse(working$dateTimeFormatString == "M/D/YYYY hh:mm:ss", "MM/DD/YYYY hh:mm:ss", working$dateTimeFormatString)
# Clean up: Values in the 'units' column should be NA when the 'class' column
# contains either a value of 'character' or 'categorical'. These don't have
# units.
summary$unit <- ifelse(summary$class == "character" | summary$class == "categorical", NA, summary$unit)
working$unit <- ifelse(working$class == "character" | working$class == "categorical", NA, working$unit)
# Clean up: Quote characters in the 'attributeDefinition' column may be
# causing parsing errors in ECC.
working$attributeDefinition[1]
working$attributeDefinition[3]
working$attributeDefinition[3] <- "test"
# Add missing columns and rearrange to complete the EAL attribute templates
missing_columns <- c("missingValueCode", "missingValueCodeExplanation")
summary <- summary %>%
mutate(
missingValueCode = NA,
missingValueCodeExplanation = NA
) %>%
select(
attributeName,
attributeDefinition,
class,
unit,
dateTimeFormatString,
missingValueCode,
missingValueCodeExplanation
)
working <- working %>%
mutate(
missingValueCode = NA,
missingValueCodeExplanation = NA
) %>%
select(
attributeName,
attributeDefinition,
class,
unit,
dateTimeFormatString,
missingValueCode,
missingValueCodeExplanation
)
# Add missing value codes. These are not defined in the source metadata tables,
# but rather determined by conversation with the data creator.
missing_value_code <- "-999"
missing_value_code_explanation <- "Missing value"
summary$missingValueCode <- missing_value_code
summary$missingValueCodeExplanation <- missing_value_code_explanation
working$missingValueCode <- missing_value_code
working$missingValueCodeExplanation <- missing_value_code_explanation
# Write the EAL attribute templates to file -----------------------------------
write_tsv(summary, file = paste0(path_templates, "/attributes_SIMS_LTAMPebbleCount_Summary.txt"))
write_tsv(working, file = paste0(path_templates, "/attributes_SIMS_LTAMPebbleCount_Working.txt"))
EMLassemblyline::make_eml(
path = path_templates,
data.path = paste0(path_data, "/processed"),
eml.path = path_eml,
dataset.title = "Long Term Aquatic Monitoring (LTAM) Pebble Count, 2006-2017",
temporal.coverage = c("2006-01-01", "2017-01-01"),
geographic.description = "Study site",
geographic.coordinates = c("47.6199", "-121.77", "47.6199", "-121.77"),
maintenance.description = "Update if data is collected after 2017.",
data.table = c("SIMS_LTAMPebbleCount_Working.csv", "SIMS_LTAMPebbleCount_Summary.csv"),
data.table.name = c("SIMS_LTAMPebbleCountWorking2006_2017","SIMS_LTAMPebbleCountSummary2006_2017"),
data.table.description = c("Long Term Aquatic Monitoring (LTAM) pebble count data, 2006-2017", "Long Term Aquatic Monitoring (LTAM) pebble count summary analysis, 2006-2017"),
other.entity = c("SIMS_LTAMPebbleCount_GraphsTables.xlsx"),
other.entity.name = c("SIMS_LTAMPebbleCount_GraphsTables"),
other.entity.description = c("Excel workbook that has the analysis for pebble count data (graphs, tables, formulas, and statistics). The workbook contains conditional formatting. This file will be useful if the data steward wants to replicate the analysis in the future."),
user.id = "EDI",
user.domain = "EDI",
package.id = "cos-spu.108.2")
issues()
View(working)
working <- read_csv("./data/processed/SIMS_LTAMPebbleCount_Working.csv")
View(working)
# TESTING ...
working <- read_csv("./data/processed/SIMS_LTAMPebbleCount_Working.csv")
View(working)
comments <- working$COMMENT
comments <- working$COMMENTS
# Remove all possible new line characters types from comments
comments <- gsub("\r\n", " ", comments)
comments <- gsub("\n", " ", comments)
comments <- gsub("\r", " ", comments)
comments <- working$COMMENTS
comments <- working$COMMENTS[1]
comments <- working$COMMENTS
comments[1]
# Remove all possible new line characters types from comments
comments <- gsub("\r\n", " ", comments)
comments <- gsub("\n", " ", comments)
comments <- gsub("\r", " ", comments)
comments[1]
write_csv(working, "./data/processed/SIMS_LTAMPebbleCount_Working.csv")
EMLassemblyline::make_eml(
path = path_templates,
data.path = paste0(path_data, "/processed"),
eml.path = path_eml,
dataset.title = "Long Term Aquatic Monitoring (LTAM) Pebble Count, 2006-2017",
temporal.coverage = c("2006-01-01", "2017-01-01"),
geographic.description = "Study site",
geographic.coordinates = c("47.6199", "-121.77", "47.6199", "-121.77"),
maintenance.description = "Update if data is collected after 2017.",
data.table = c("SIMS_LTAMPebbleCount_Working.csv", "SIMS_LTAMPebbleCount_Summary.csv"),
data.table.name = c("SIMS_LTAMPebbleCountWorking2006_2017","SIMS_LTAMPebbleCountSummary2006_2017"),
data.table.description = c("Long Term Aquatic Monitoring (LTAM) pebble count data, 2006-2017", "Long Term Aquatic Monitoring (LTAM) pebble count summary analysis, 2006-2017"),
other.entity = c("SIMS_LTAMPebbleCount_GraphsTables.xlsx"),
other.entity.name = c("SIMS_LTAMPebbleCount_GraphsTables"),
other.entity.description = c("Excel workbook that has the analysis for pebble count data (graphs, tables, formulas, and statistics). The workbook contains conditional formatting. This file will be useful if the data steward wants to replicate the analysis in the future."),
user.id = "EDI",
user.domain = "EDI",
package.id = "cos-spu.108.2")
issues()
EMLassemblyline::make_eml(
path = path_templates,
data.path = paste0(path_data, "/processed"),
eml.path = path_eml,
dataset.title = "Long Term Aquatic Monitoring (LTAM) Pebble Count, 2006-2017",
temporal.coverage = c("2006-01-01", "2017-01-01"),
geographic.description = "Study site",
geographic.coordinates = c("47.6199", "-121.77", "47.6199", "-121.77"),
maintenance.description = "Update if data is collected after 2017.",
data.table = c("SIMS_LTAMPebbleCount_Working.csv", "SIMS_LTAMPebbleCount_Summary.csv"),
data.table.name = c("SIMS_LTAMPebbleCountWorking2006_2017","SIMS_LTAMPebbleCountSummary2006_2017"),
data.table.description = c("Long Term Aquatic Monitoring (LTAM) pebble count data, 2006-2017", "Long Term Aquatic Monitoring (LTAM) pebble count summary analysis, 2006-2017"),
other.entity = c("SIMS_LTAMPebbleCount_GraphsTables.xlsx"),
other.entity.name = c("SIMS_LTAMPebbleCount_GraphsTables"),
other.entity.description = c("Excel workbook that has the analysis for pebble count data (graphs, tables, formulas, and statistics). The workbook contains conditional formatting. This file will be useful if the data steward wants to replicate the analysis in the future."),
user.id = "EDI",
user.domain = "EDI",
package.id = "cos-spu.108.2")
issues()
?make_eml
EMLassemblyline::make_eml(
path = path_templates,
data.path = paste0(path_data, "/processed"),
eml.path = path_eml,
dataset.title = "Long Term Aquatic Monitoring (LTAM) Pebble Count, 2006-2017",
temporal.coverage = c("2006-01-01", "2017-01-01"),
geographic.description = "Study site",
geographic.coordinates = c("47.6199", "-121.77", "47.6199", "-121.77"),
maintenance.description = "Update if data is collected after 2017.",
data.table = c("SIMS_LTAMPebbleCount_Working.csv", "SIMS_LTAMPebbleCount_Summary.csv"),
data.table.name = c("SIMS_LTAMPebbleCountWorking2006_2017","SIMS_LTAMPebbleCountSummary2006_2017"),
data.table.description = c("Long Term Aquatic Monitoring (LTAM) pebble count data, 2006-2017", "Long Term Aquatic Monitoring (LTAM) pebble count summary analysis, 2006-2017"),
data.table.quote.character = c('"', '"'),
other.entity = c("SIMS_LTAMPebbleCount_GraphsTables.xlsx"),
other.entity.name = c("SIMS_LTAMPebbleCount_GraphsTables"),
other.entity.description = c("Excel workbook that has the analysis for pebble count data (graphs, tables, formulas, and statistics). The workbook contains conditional formatting. This file will be useful if the data steward wants to replicate the analysis in the future."),
user.id = "EDI",
user.domain = "EDI",
package.id = "cos-spu.108.2")
issues()
codes <- read_csv(paste0(path_data, "/processed/codes.csv"))
View(codes)
template_categorical_variables(
path = path_templates,
data.path = paste0(path_data, "/processed")
)
# Read the EAL categorical variables template
catvars_eal <- read_tsv(file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
View(catvars_eal)
codes <- rename(
codes,
"definition" = `DESCRIPTION`,
"code" = `VALUE`
)
codes <- left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
template_categorical_variables(
path = path_templates,
data.path = paste0(path_data, "/processed")
)
# Read the EAL categorical variables template
catvars_eal <- read_tsv(file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
codes <- rename(
codes,
"definition" = `DESCRIPTION`,
"code" = `VALUE`
)
left_join(catvars_eal, codes, by = "code")
codes <- left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
codes <- codes %>% filter(!is.na(definition))
write_tsv(catvars_eal, file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
EMLassemblyline::make_eml(
path = path_templates,
data.path = paste0(path_data, "/processed"),
eml.path = path_eml,
dataset.title = "Long Term Aquatic Monitoring (LTAM) Pebble Count, 2006-2017",
temporal.coverage = c("2006-01-01", "2017-01-01"),
geographic.description = "Study site",
geographic.coordinates = c("47.6199", "-121.77", "47.6199", "-121.77"),
maintenance.description = "Update if data is collected after 2017.",
data.table = c("SIMS_LTAMPebbleCount_Working.csv", "SIMS_LTAMPebbleCount_Summary.csv"),
data.table.name = c("SIMS_LTAMPebbleCountWorking2006_2017","SIMS_LTAMPebbleCountSummary2006_2017"),
data.table.description = c("Long Term Aquatic Monitoring (LTAM) pebble count data, 2006-2017", "Long Term Aquatic Monitoring (LTAM) pebble count summary analysis, 2006-2017"),
data.table.quote.character = c('"', '"'),
other.entity = c("SIMS_LTAMPebbleCount_GraphsTables.xlsx"),
other.entity.name = c("SIMS_LTAMPebbleCount_GraphsTables"),
other.entity.description = c("Excel workbook that has the analysis for pebble count data (graphs, tables, formulas, and statistics). The workbook contains conditional formatting. This file will be useful if the data steward wants to replicate the analysis in the future."),
user.id = "EDI",
user.domain = "EDI",
package.id = "cos-spu.108.2")
issues()
# Read the EAL categorical variables template
catvars_eal <- read_tsv(file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
View(catvars_eal)
View(codes)
codes <- left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
View(catvars_eal)
# Read the EAL categorical variables template
catvars_eal <- read_tsv(file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
codes <- read_csv(paste0(path_data, "/processed/codes.csv"))
codes <- left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
codes <- rename(
codes,
"definition" = `DESCRIPTION`,
# "code" = `VALUE`
)
codes <- left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
codes <- rename(
codes,
"definition" = `DESCRIPTION`,
"code" = `VALUE`
)
codes <- read_csv(paste0(path_data, "/processed/codes.csv"))
# Read the EAL categorical variables template
catvars_eal <- read_tsv(file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
codes <- rename(
codes,
"definition" = `DESCRIPTION`,
"code" = `VALUE`
)
left_join(catvars_eal, codes, by = "code")
test <- left_join(catvars_eal, codes, by = "code")
View(test)
left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
)
left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
codes <- left_join(catvars_eal, codes, by = "code") %>%
select(
attributeName,
code,
definition.y
) %>%
rename(
"definition" = definition.y
)
codes %>% filter(!is.na(definition))
codes <- codes %>% filter(!is.na(definition))
write_tsv(codes, file = paste0(path_templates, "/catvars_SIMS_LTAMPebbleCount_Summary.txt"))
EMLassemblyline::make_eml(
path = path_templates,
data.path = paste0(path_data, "/processed"),
eml.path = path_eml,
dataset.title = "Long Term Aquatic Monitoring (LTAM) Pebble Count, 2006-2017",
temporal.coverage = c("2006-01-01", "2017-01-01"),
geographic.description = "Study site",
geographic.coordinates = c("47.6199", "-121.77", "47.6199", "-121.77"),
maintenance.description = "Update if data is collected after 2017.",
data.table = c("SIMS_LTAMPebbleCount_Working.csv", "SIMS_LTAMPebbleCount_Summary.csv"),
data.table.name = c("SIMS_LTAMPebbleCountWorking2006_2017","SIMS_LTAMPebbleCountSummary2006_2017"),
data.table.description = c("Long Term Aquatic Monitoring (LTAM) pebble count data, 2006-2017", "Long Term Aquatic Monitoring (LTAM) pebble count summary analysis, 2006-2017"),
data.table.quote.character = c('"', '"'),
other.entity = c("SIMS_LTAMPebbleCount_GraphsTables.xlsx"),
other.entity.name = c("SIMS_LTAMPebbleCount_GraphsTables"),
other.entity.description = c("Excel workbook that has the analysis for pebble count data (graphs, tables, formulas, and statistics). The workbook contains conditional formatting. This file will be useful if the data steward wants to replicate the analysis in the future."),
user.id = "EDI",
user.domain = "EDI",
package.id = "cos-spu.108.2")
issues()
